// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users User[]
}

model User {
  id              Int      @id @default(autoincrement())
  fullName        String
  email           String   @unique
  password        String
  profileImageUrl String?  // URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ)
  role            Role     @relation(fields: [roleId], references: [id])
  roleId          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // –°–≤—è–∑–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
  createdTests    Test[]           @relation("TestCreator")
  testSessions    TestSession[]    @relation("TestSessionUser")
}

// üß© 1. Test ‚Äî —Ç–µ—Å—Ç
model Test {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdBy   User     @relation("TestCreator", fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime @default(now())
  
  // –°–≤—è–∑–∏
  questions     Question[]     @relation("TestQuestions")
  testSessions  TestSession[]  @relation("TestSessions")
}

// ‚ùì 2. Question ‚Äî –≤–æ–ø—Ä–æ—Å
model Question {
  id        Int           @id @default(autoincrement())
  test      Test          @relation("TestQuestions", fields: [testId], references: [id], onDelete: Cascade)
  testId    Int
  text      String
  type      QuestionType
  score     Int
  createdAt DateTime      @default(now())
  
  // –°–≤—è–∑–∏
  options   Option[]      @relation("QuestionOptions")
  answers   Answer[]      @relation("QuestionAnswers")
}

// üîò 3. Option ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
model Option {
  id         Int      @id @default(autoincrement())
  question   Question @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  text       String
  isCorrect  Boolean
  
  // –°–≤—è–∑–∏
  answers    Answer[] @relation("SelectedOption")
}

// üìú 4. TestSession ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
model TestSession {
  id         Int       @id @default(autoincrement())
  user       User      @relation("TestSessionUser", fields: [userId], references: [id])
  userId     Int
  test       Test      @relation("TestSessions", fields: [testId], references: [id])
  testId     Int
  startedAt  DateTime  @default(now())
  finishedAt DateTime?
  totalScore Int       @default(0)
  
  // –°–≤—è–∑–∏
  answers    Answer[]  @relation("TestSessionAnswers")
}

// ‚úÖ 5. Answer ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
model Answer {
  id               Int         @id @default(autoincrement())
  testSession      TestSession @relation("TestSessionAnswers", fields: [testSessionId], references: [id], onDelete: Cascade)
  testSessionId    Int
  question         Question    @relation("QuestionAnswers", fields: [questionId], references: [id])
  questionId       Int
  selectedOption   Option?     @relation("SelectedOption", fields: [selectedOptionId], references: [id])
  selectedOptionId Int?
  openAnswer       String?
  aiScore          Int?
  reviewed         Boolean     @default(false)
  
  // –°–≤—è–∑–∏
  aiFeedback       AiFeedback? @relation("AnswerAiFeedback")
}

// üß† 6. AiFeedback ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ò–ò
model AiFeedback {
  id          Int      @id @default(autoincrement())
  answer      Answer   @relation("AnswerAiFeedback", fields: [answerId], references: [id], onDelete: Cascade)
  answerId    Int      @unique
  feedback    String
  score       Int
  evaluatedAt DateTime @default(now())
}

// Enum –¥–ª—è —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
enum QuestionType {
  MULTIPLE_CHOICE
  OPEN
}

// ‚öôÔ∏è Settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}