import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import OpenAI from 'openai';



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { questionText, userAnswer, maxScore } = body;

    console.log('ü§ñ –ò–ò –û–¶–ï–ù–ö–ê - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    console.log('üìù –í–æ–ø—Ä–æ—Å:', questionText);
    console.log('üí¨ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userAnswer);
    console.log('üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:', maxScore);

    if (!questionText || !userAnswer || maxScore === undefined) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã questionText, userAnswer –∏ maxScore' },
        { status: 400 }
      );
    }

    // –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ò–ò
    const aiResult = await evaluateWithAI(questionText, userAnswer, maxScore);

    console.log('‚úÖ –ò–ò –û–¶–ï–ù–ö–ê - –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
      score: aiResult.score,
      feedback: aiResult.feedback
    });

    return NextResponse.json({
      score: aiResult.score,
      feedback: aiResult.feedback
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ò–ò:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// –†–µ–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ ChatGPT API
async function evaluateWithAI(questionText: string, userAnswer: string, maxScore: number): Promise<{score: number, feedback: string}> {
  try {
    console.log('üîç –ò–ò –û–¶–ï–ù–ö–ê - –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞...');
    
    if (!process.env.OPENAI_API_KEY) {
      console.warn('‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É');
      const randomScore = Math.floor(Math.random() * (maxScore + 1));
      console.log('üé≤ –ó–∞–≥–ª—É—à–∫–∞ - —Å–ª—É—á–∞–π–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:', randomScore);
      return {
        score: randomScore,
        feedback: generateFallbackFeedback(randomScore, maxScore)
      };
    }

    console.log('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT...');

    // –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    const scorePrompt = `–¢—ã —Å—Ç—Ä–æ–≥–∏–π —ç–∫—Å–ø–µ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –º–∞–ª–æ–º–æ—â–Ω–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞.

–í–æ—Ç –≤–æ–ø—Ä–æ—Å: ${questionText}
–í–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userAnswer}

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:
- 0 –±–∞–ª–ª–æ–≤: –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –Ω–µ –ø–æ —Ç–µ–º–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π
- 1-2 –±–∞–ª–ª–∞: –æ—á–µ–Ω—å —Å–ª–∞–±—ã–π –æ—Ç–≤–µ—Ç, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
- 3-4 –±–∞–ª–ª–∞: —Å–ª–∞–±—ã–π –æ—Ç–≤–µ—Ç, –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—à–∏–±–∫–∏
- 5-6 –±–∞–ª–ª–æ–≤: —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏
- 7-8 –±–∞–ª–ª–æ–≤: —Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç, –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã
- 9-10 –±–∞–ª–ª–æ–≤: –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ª–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: ${maxScore}
–û—Ü–µ–Ω–∏ —Å—Ç—Ä–æ–≥–æ –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ. –î–∞–π —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ ${maxScore}.`;

    // –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–¥–±–µ–∫–∞
    const feedbackPrompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –º–∞–ª–æ–º–æ—â–Ω–æ–≥–æ —Ä–µ–∞–∫—Ç–æ—Ä–∞.

–í–æ—Ç –≤–æ–ø—Ä–æ—Å: ${questionText}
–í–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userAnswer}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
–û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.
–§–∏–¥–±–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º.`;

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É
    const scoreCompletion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "–¢—ã —Å—Ç—Ä–æ–≥–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç—ã. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–ª–∞. –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –Ω–µ –∑–∞–≤—ã—à–∞–π –æ—Ü–µ–Ω–∫–∏. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ."
        },
        {
          role: "user",
          content: scorePrompt
        }
      ],
      temperature: 0.1, // –£–º–µ–Ω—å—à–∞–µ–º temperature –¥–ª—è –±–æ–ª–µ–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
      max_tokens: 10,
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–¥–±–µ–∫
    const feedbackCompletion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç—ã. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        },
        {
          role: "user",
          content: feedbackPrompt
        }
      ],
      temperature: 0.7,
      max_tokens: 200,
    });

    const scoreResponse = scoreCompletion.choices[0]?.message?.content?.trim();
    const feedbackResponse = feedbackCompletion.choices[0]?.message?.content?.trim();
    
    console.log('üìä –ò–ò –û–¶–ï–ù–ö–ê - –û—Ç–≤–µ—Ç—ã –æ—Ç ChatGPT:');
    console.log('   –û—Ü–µ–Ω–∫–∞ (—Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç):', scoreResponse);
    console.log('   –§–∏–¥–±–µ–∫ (—Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç):', feedbackResponse);
    
    let score = 0;
    if (scoreResponse) {
      const parsedScore = parseInt(scoreResponse);
      console.log('   –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ü–µ–Ω–∫–∏:', parsedScore, 'isNaN:', isNaN(parsedScore));
      if (!isNaN(parsedScore) && parsedScore >= 0 && parsedScore <= maxScore) {
        score = parsedScore;
        console.log('   ‚úÖ –û—Ü–µ–Ω–∫–∞ –≤–∞–ª–∏–¥–Ω–∞:', score);
      } else {
        console.log('   ‚ùå –û—Ü–µ–Ω–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0');
      }
    } else {
      console.log('   ‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –¥–ª—è –æ—Ü–µ–Ω–∫–∏');
    }
    
    const feedback = feedbackResponse || generateFallbackFeedback(score, maxScore);
    console.log('   üìù –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫:', feedback);
    
    console.log('üéØ –ò–ò –û–¶–ï–ù–ö–ê - –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', { score, feedback });
    
    return { score, feedback };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API:', error);
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...');
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –æ—Ü–µ–Ω–∫—É –∏ —Ñ–∏–¥–±–µ–∫
    const randomScore = Math.floor(Math.random() * (maxScore + 1));
    console.log('üé≤ Fallback - —Å–ª—É—á–∞–π–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:', randomScore);
    return {
      score: randomScore,
      feedback: generateFallbackFeedback(randomScore, maxScore)
    };
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
function generateFallbackFeedback(score: number, maxScore: number): string {
  const percentage = (score / maxScore) * 100;
  
  if (percentage >= 90) {
    return "–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç–∞ —Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!";
  } else if (percentage >= 70) {
    return "–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç. –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ—Å–≤–µ—â–µ–Ω—ã. –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.";
  } else if (percentage >= 50) {
    return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ï—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏, –Ω–æ –æ–±—â–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.";
  } else if (percentage >= 30) {
    return "–°–ª–∞–±—ã–π –æ—Ç–≤–µ—Ç. –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.";
  } else {
    return "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ —Ç–µ–º–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.";
  }
} 