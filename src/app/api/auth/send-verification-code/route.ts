import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcryptjs';
import { sendEmail, sendTestEmail, generateVerificationEmailHtml } from '@/lib/email';
import { sendVerificationCodeToTelegram, checkTelegramSettings } from '@/lib/telegram';

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json();

    if (!email || !password) {
      return NextResponse.json(
        { message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Settings
    const adminSettings = await prisma.settings.findUnique({
      where: {
        key: 'admin_login'
      }
    });

    if (!adminSettings) {
      return NextResponse.json(
        { message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
        { status: 404 }
      );
    }

    // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –ø–æ–ª—è value
    let adminCredentials;
    try {
      adminCredentials = JSON.parse(adminSettings.value);
    } catch (error) {
      return NextResponse.json(
        { message: '–û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' },
        { status: 500 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º email
    if (adminCredentials.login !== email) {
      return NextResponse.json(
        { message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, adminCredentials.password);
    
    if (!isPasswordValid) {
      return NextResponse.json(
        { message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    const codeData = {
      code: verificationCode,
      email: email,
      expiresAt: new Date(Date.now() + 10 * 60 * 1000).toISOString(), // 10 –º–∏–Ω—É—Ç
      attempts: 0
    };

    await prisma.settings.upsert({
      where: { key: 'admin_verification_code' },
      update: { value: JSON.stringify(codeData) },
      create: {
        key: 'admin_verification_code',
        value: JSON.stringify(codeData)
      }
    });

    // –í—ã–≤–æ–¥–∏–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:');
    console.log('üìß Email:', email);
    console.log('üî¢ –ö–æ–¥:', verificationCode);
    console.log('‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:', new Date(Date.now() + 10 * 60 * 1000).toLocaleString('ru-RU'));
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
    let codeSent = false;
    if (checkTelegramSettings()) {
      console.log('üì± –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram...');
      codeSent = await sendVerificationCodeToTelegram(verificationCode, email);
      if (codeSent) {
        console.log('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
      }
    }

    // –ï—Å–ª–∏ Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
    if (!codeSent) {
      console.log('üìß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email...');
      const emailHtml = generateVerificationEmailHtml(verificationCode, email);
      let emailSent = await sendEmail({
        to: email,
        subject: 'üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - StartAtom Admin',
        html: emailHtml
      });

      // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
      if (!emailSent) {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ email...');
        emailSent = await sendTestEmail(verificationCode, email);
      }

      if (emailSent) {
        codeSent = true;
        console.log('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ email');
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–¥ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏
    if (!codeSent) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥, –Ω–æ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤—ã—à–µ');
    }

    return NextResponse.json({
      message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram, email –∏–ª–∏ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞.',
      email: email,
      note: '–ö–æ–¥ —Ç–∞–∫–∂–µ –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error);
    return NextResponse.json(
      { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
} 