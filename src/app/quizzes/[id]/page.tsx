"use client";

import { useState, useEffect, useRef } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import styles from './quiz.module.css';

interface Question {
  id: number;
  text: string;
  type: 'MULTIPLE_CHOICE' | 'OPEN';
  options: {
    id: number;
    text: string;
  }[];
}

interface Test {
  id: number;
  title: string;
  description: string | null;
  questions: Question[];
}

interface User {
  id: number;
  fullName: string;
  email: string;
}

export default function QuizPage() {
  const router = useRouter();
  const params = useParams();
  const testId = params.id as string;
  
  const [test, setTest] = useState<Test | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<{ [key: number]: number }>({});
  const [textAnswers, setTextAnswers] = useState<{ [key: number]: string }>({});
  const [quizStarted, setQuizStarted] = useState(false);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [results, setResults] = useState<{
    correctAnswers: number;
    totalQuestions: number;
    percentage: number;
  } | null>(null);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const mobileMenuRef = useRef<HTMLDivElement>(null);
  const burgerRef = useRef<HTMLButtonElement>(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const isAuthenticated = localStorage.getItem('isAuthenticated');
    const userData = localStorage.getItem('user');

    if (!isAuthenticated || !userData) {
      router.push('/auth/signin');
      return;
    }

    try {
      const user = JSON.parse(userData);
      setUser(user);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      router.push('/auth/signin');
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
    fetchTest();
  }, [router, testId]);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        mobileMenuOpen &&
        mobileMenuRef.current &&
        !mobileMenuRef.current.contains(event.target as Node) &&
        burgerRef.current &&
        !burgerRef.current.contains(event.target as Node)
      ) {
        setMobileMenuOpen(false);
      }
    };

    if (mobileMenuOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [mobileMenuOpen]);

  const fetchTest = async () => {
    try {
      const response = await fetch(`/api/tests/${testId}`);
      if (response.ok) {
        const data = await response.json();
        setTest(data);
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞');
        router.push('/quizzes');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞:', error);
      router.push('/quizzes');
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      await fetch('/api/auth/logout', { method: 'POST' });
      localStorage.removeItem('user');
      localStorage.removeItem('isAuthenticated');
      router.push('/');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
    }
  };

  const toggleMobileMenu = () => {
    setMobileMenuOpen(!mobileMenuOpen);
  };

  const startQuiz = () => {
    setQuizStarted(true);
  };

  const selectAnswer = (questionId: number, optionId: number) => {
    setSelectedAnswers(prev => ({
      ...prev,
      [questionId]: optionId
    }));
  };

  const handleTextAnswer = (questionId: number, text: string) => {
    setTextAnswers(prev => ({
      ...prev,
      [questionId]: text
    }));
  };

  const nextQuestion = () => {
    if (currentQuestionIndex < (test?.questions.length || 0) - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    }
  };

  const prevQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
    }
  };

  const submitQuiz = async () => {
    if (!test) return;

    try {
      const response = await fetch('/api/results', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          testId: test.id,
          userId: user?.id,
          answers: selectedAnswers,
          textAnswers: textAnswers
        }),
      });

      if (response.ok) {
        const result = await response.json();
        setResults(result);
        setQuizCompleted(true);
      } else {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    }
  };

  const goToResults = () => {
    router.push('/results');
  };

  const goToQuizzes = () => {
    router.push('/quizzes');
  };

  if (loading) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–≤–∏–∑–∞...</div>
      </div>
    );
  }

  if (!test) {
    return (
      <div className={styles.container}>
        <div className={styles.error}>–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <header className={styles.header}>
        <div className={styles.headerContent}>
          <div className={styles.logoContainer}>
            <Image
              src="/logo-ros.png"
              alt="StartAtom Logo"
              width={40}
              height={40}
              priority
              style={{ borderRadius: '8px' }}
            />
            <h1 className={styles.logo}>StartAtom</h1>
          </div>
          
          {/* –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */}
          <button 
            ref={burgerRef}
            className={styles.burgerMenu}
            onClick={toggleMobileMenu}
            aria-label="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
          >
            <span className={`${styles.burgerLine} ${mobileMenuOpen ? styles.active : ''}`}></span>
            <span className={`${styles.burgerLine} ${mobileMenuOpen ? styles.active : ''}`}></span>
            <span className={`${styles.burgerLine} ${mobileMenuOpen ? styles.active : ''}`}></span>
          </button>

          {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
          <nav className={`${styles.navigation} ${styles.desktopNav}`}>
            <Link href="/dashboard" className={styles.navLink}>
              –ü—Ä–æ—Ñ–∏–ª—å
            </Link>
            <Link href="/quizzes" className={styles.navLink}>
              –ö–≤–∏–∑—ã
            </Link>
            <Link href="/results" className={styles.navLink}>
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </Link>
          </nav>

          {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è —Å–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
          <div className={`${styles.userSection} ${styles.desktopUserSection}`}>
            <span className={styles.userName}>{user?.fullName}</span>
            <button onClick={handleLogout} className={styles.logoutBtn}>
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>

        {/* –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
        <nav 
          ref={mobileMenuRef}
          className={`${styles.mobileNavigation} ${mobileMenuOpen ? styles.open : ''}`}
        >
          <div className={styles.mobileNavContent}>
            <Link href="/dashboard" className={styles.mobileNavBtn}>
              <span className={styles.mobileNavIcon}>üë§</span>
              –ü—Ä–æ—Ñ–∏–ª—å
            </Link>
            <Link href="/quizzes" className={styles.mobileNavBtn}>
              <span className={styles.mobileNavIcon}>üìù</span>
              –ö–≤–∏–∑—ã
            </Link>
            <Link href="/results" className={styles.mobileNavBtn}>
              <span className={styles.mobileNavIcon}>üìä</span>
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </Link>
            <button onClick={handleLogout} className={styles.mobileLogoutBtn}>
              <span className={styles.mobileNavIcon}>üö™</span>
              –í—ã–π—Ç–∏
            </button>
          </div>
        </nav>
      </header>

      <main className={styles.main}>
        {!quizStarted ? (
          <div className={styles.quizIntro}>
            <div className={styles.quizHeader}>
              <h1 className={styles.quizTitle}>{test.title}</h1>
              {test.description && (
                <p className={styles.quizDescription}>{test.description}</p>
              )}
              <div className={styles.quizStats}>
                <span className={styles.statItem}>
                  üìù {test.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤
                </span>
                <span className={styles.statItem}>
                  ‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {Math.ceil(test.questions.length * 1.5)} –º–∏–Ω
                </span>
              </div>
            </div>
            
                         <div className={styles.quizInstructions}>
               <h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
               <ul>
                 <li>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å</li>
                 <li>–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</li>
                 <li>–î–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ</li>
                 <li>–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º</li>
                 <li>–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</li>
               </ul>
             </div>
            
            <div className={styles.quizActions}>
              <button onClick={startQuiz} className={styles.startQuizBtn}>
                –ù–∞—á–∞—Ç—å –∫–≤–∏–∑
              </button>
              <button onClick={goToQuizzes} className={styles.backBtn}>
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–≤–∏–∑–∞–º
              </button>
            </div>
          </div>
        ) : quizCompleted ? (
          <div className={styles.quizResults}>
            <div className={styles.resultsHeader}>
              <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞</h1>
              <h2>{test.title}</h2>
            </div>
            
            <div className={styles.resultsContent}>
              <div className={styles.resultCard}>
                <div className={styles.resultScore}>
                  <span className={styles.scoreNumber}>{results?.correctAnswers}</span>
                  <span className={styles.scoreTotal}>–∏–∑ {results?.totalQuestions}</span>
                </div>
                <div className={styles.resultPercentage}>
                  {results?.percentage}%
                </div>
                <div className={styles.resultMessage}>
                  {results && results.percentage >= 80 ? '–û—Ç–ª–∏—á–Ω–æ!' : 
                   results && results.percentage >= 60 ? '–•–æ—Ä–æ—à–æ!' : 
                   results && results.percentage >= 40 ? '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ' : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'}
                </div>
              </div>
            </div>
            
            <div className={styles.resultsActions}>
              <button onClick={goToResults} className={styles.viewResultsBtn}>
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </button>
              <button onClick={goToQuizzes} className={styles.backBtn}>
                –ö –¥—Ä—É–≥–∏–º –∫–≤–∏–∑–∞–º
              </button>
            </div>
          </div>
        ) : (
          <div className={styles.quizContent}>
            <div className={styles.quizProgress}>
              <div className={styles.progressBar}>
                <div 
                  className={styles.progressFill}
                  style={{ width: `${((currentQuestionIndex + 1) / test.questions.length) * 100}%` }}
                ></div>
              </div>
              <div className={styles.progressText}>
                –í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {test.questions.length}
              </div>
            </div>

                         <div className={styles.questionContainer}>
               <h2 className={styles.questionText}>
                 {test.questions[currentQuestionIndex].text}
               </h2>
               
               {test.questions[currentQuestionIndex].type === 'MULTIPLE_CHOICE' ? (
                 <div className={styles.optionsContainer}>
                   {test.questions[currentQuestionIndex].options.map((option) => (
                     <button
                       key={option.id}
                       className={`${styles.optionBtn} ${
                         selectedAnswers[test.questions[currentQuestionIndex].id] === option.id 
                           ? styles.selected 
                           : ''
                       }`}
                       onClick={() => selectAnswer(test.questions[currentQuestionIndex].id, option.id)}
                     >
                       <span className={styles.optionText}>{option.text}</span>
                     </button>
                   ))}
                 </div>
               ) : (
                 <div className={styles.textAnswerContainer}>
                   <textarea
                     className={styles.textAnswerInput}
                     placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                     value={textAnswers[test.questions[currentQuestionIndex].id] || ''}
                     onChange={(e) => handleTextAnswer(test.questions[currentQuestionIndex].id, e.target.value)}
                     rows={4}
                   />
                 </div>
               )}
             </div>

            <div className={styles.quizNavigation}>
              <button 
                onClick={prevQuestion}
                className={styles.navBtn}
                disabled={currentQuestionIndex === 0}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
              
              {currentQuestionIndex === test.questions.length - 1 ? (
                                 <button 
                   onClick={submitQuiz}
                   className={styles.submitBtn}
                   disabled={
                     !test.questions.every(question => {
                       if (question.type === 'MULTIPLE_CHOICE') {
                         return selectedAnswers[question.id] !== undefined;
                       } else {
                         return textAnswers[question.id] && textAnswers[question.id].trim() !== '';
                       }
                     })
                   }
                 >
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–∏–∑
                </button>
              ) : (
                <button 
                  onClick={nextQuestion}
                  className={styles.navBtn}
                >
                  –î–∞–ª–µ–µ ‚Üí
                </button>
              )}
            </div>
          </div>
        )}
      </main>
    </div>
  );
} 